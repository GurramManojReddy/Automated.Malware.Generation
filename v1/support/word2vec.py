# Automated Malware Generation paper
# Check if functions are supported by the model
# Marcus Botacin - 2022/23

# Disable warnings, this is not a production code
import warnings
warnings.filterwarnings(action = 'ignore')

# Use word2vec from gensim
import gensim
from gensim.models import Word2Vec
import os
import sys

if len(sys.argv)!=4:
    print("Usage: python word2vec.py <parsed dir> <reference func.csv> <N-gram>")

# Read files
data = []
print("Reading files")
# for all files in directory
for _file in os.listdir(sys.argv[1]):
    # ugly way to open basedir + file
    _f = sys.argv[1]+_file
    # ugly way to read entire files
    x = open(_f,'r').read().strip().split("\n")
    # if not empty (these are error cases)
    if x != []:
        # save data
        data.append(x)
# Now data has all data lines from all files we have
# Data 2 will have unique entries
data2 = set()
for line in open(sys.argv[2],'r').read().strip().split("\n")[1:]:
    name, sup, rem = line.split(',')
    # Only fully supported functions
    if float(sup) == 100.0:
        data2.add(name)

print("Training the model")
model1 = gensim.models.Word2Vec(data, min_count = 1) 

print("Testing...")
# Ratio of supported funcs
sups = 0
# with regards to the unique funcs
for func in data2:
    try:
        # Check if words (funcs) are related
        # Top N = N-gram
        x = model1.wv.most_similar(positive=[func],topn=int(sys.argv[3]))
        # If all are related
        if(all(a[0] in data2 for a in x)):
            # we have a supported tuple
            sups=sups+1 
    except:
        pass

# Print how many supported tuples we have
print("%f" % (100*sups/float(len(data2))))
