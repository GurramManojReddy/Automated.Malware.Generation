from http.server import SimpleHTTPRequestHandler
from socketserver import TCPServer
import subprocess
import os
import shutil

# Defining the paths
count_path = r"C:\Users\Win10\Desktop\Integration-Removals\Server-2\Others\count.txt" 
variables_path = r"C:\Users\Win10\Desktop\Integration-Removals\Server-1\variables.txt"
BB_path = r"C:\Users\Win10\Desktop\Integration-Removals\Server-1\BuildingBlocks"
root_folder = r"C:\Users\Win10\Desktop\Integration-Removals\Server-1"
BB_Initial_folder = r"C:\Users\Win10\Desktop\Integration-Removals\Server-2\Controls\BB_Initial" # Building Blocks folder for iterations of the GAN by Server-2
main_file_path = r"C:\Users\Win10\Desktop\Integration-Removals\Server-1\main.c"
prompts_path = r"C:\Users\Win10\Desktop\Integration-Removals\Server-1\prompts"
prompts_final_path = r"C:\Users\Win10\Desktop\Integration-Removals\Server-2\Controls\prompts" # Prompts folder for iterations of the GAN by Server-2
dead_functions_path = r"C:\Users\Win10\Desktop\Integration-Removals\Server-2\Controls\DeadCode"

# Function to read the variables from a file
def read_variables(filename):
    variables = []
    with open(filename, 'r') as file:
        for line in file:
            variables.append(int(line.strip()))
    return variables

# Function to empty a folder
def empty_folder(folder_path):
    for item in os.listdir(folder_path):
        item_path = os.path.join(folder_path, item)
        if os.path.isfile(item_path):
            os.remove(item_path)
        elif os.path.isdir(item_path):
            empty_folder(item_path)
            os.rmdir(item_path)

# Custom handler class
class MyHandler(SimpleHTTPRequestHandler):
    def do_GET(self):
        # Empty the folder
        if not os.path.exists(os.path.dirname(count_path)):
            os.makedirs(os.path.dirname(count_path))
        with open(count_path, 'w') as file:
            file.write(str(0))
        if not os.path.exists(os.path.dirname(dead_functions_path)):
            os.makedirs(os.path.dirname(dead_functions_path))
        empty_folder(dead_functions_path)

        # Check if the files exist and delete them
        if os.path.exists("C:\\Users\\Win10\\Desktop\\Integration-Removals\\Server-1\\binary_path.exe"):
            os.remove("C:\\Users\\Win10\\Desktop\\Integration-Removals\\Server-1\\binary_path.exe")

        for i in range(10):
            shutil.copy2(os.path.join(prompts_path,f"{i+1}.txt"), os.path.join(prompts_final_path,f"{i+1}.txt"))

        variables = read_variables(variables_path)
        # Modify the building blocks to create a new binary
        print("Modifying the building blocks to create a new binary...")
        while True:
            if variables[0] < 8:
                variables[0] += 1
            elif variables[1] < 9:
                variables[1] += 1
                variables[0] = 1
            elif variables[2] < 8:
                variables[2] += 1
                variables[1] = 1
                variables[0] = 1
            elif variables[3] < 3:
                variables[3] += 1
                variables[2] = 1
                variables[1] = 1
                variables[0] = 1
            elif variables[4] < 4:
                variables[4] += 1
                variables[3] = 1
                variables[2] = 1
                variables[1] = 1
                variables[0] = 1
            elif variables[5] < 4:
                variables[5] += 1
                variables[4] = 1
                variables[3] = 1
                variables[2] = 1
                variables[1] = 1
                variables[0] = 1
            elif variables[6] < 4:
                variables[6] += 1
                variables[5] = 1
                variables[4] = 1
                variables[3] = 1
                variables[2] = 1
                variables[1] = 1
                variables[0] = 1
            elif variables[7] < 3:
                variables[7] += 1
                variables[6] = 1
                variables[5] = 1
                variables[4] = 1
                variables[3] = 1
                variables[2] = 1
                variables[1] = 1
                variables[0] = 1
            elif variables[8] < 2:
                variables[8] += 1
                variables[7] = 1
                variables[6] = 1
                variables[5] = 1
                variables[4] = 1
                variables[3] = 1
                variables[2] = 1
                variables[1] = 1
                variables[0] = 1
            elif variables[9] < 2:
                variables[9] += 1
                variables[8] = 1
                variables[7] = 1
                variables[6] = 1
                variables[5] = 1
                variables[4] = 1
                variables[3] = 1
                variables[2] = 1
                variables[1] = 1
                variables[0] = 1
            else:
                print("All combinations exhausted")
                break
            
            # new_data stores the content of all the building blocks and the main file
            new_data = ""
            # output stores the binary content that needs to be sent to the client
            output = ""
            print("Collecting Files and Compiling...")
            for i in range(10):
                if i==9:
                    with open(variables_path, 'a') as file:
                        file.write(str(variables[i]))
                elif i != 0:
                    with open(variables_path, 'a') as file:
                        file.write(str(variables[i])+"\n")
                else:
                    with open(variables_path, 'w') as file:
                        file.write(str(variables[i])+ "\n")

                with open(os.path.join(BB_path,f"BuildingBlock-{i+1}/{variables[i]}.c"), 'r') as file:
                    content = file.read()
                    new_data  = new_data + "\n"+ content

            with open(main_file_path, 'r') as file:
                content = file.read()
            new_data = new_data + "\n"+ content
            with open(f"{root_folder}/c_file_path.c", 'w') as file:
                file.write(new_data)
            ip = os.path.join(root_folder,'c_file_path.c')
            op = os.path.join(root_folder,'binary_path.exe')
            # Compiling the new binary
            try:
                subprocess.run(['gcc', ip, '-o', op], stderr=subprocess.DEVNULL)
            except Exception as e:
                print(f"Error compiling file, Trying again")
            if os.path.exists("C:\\Users\\Win10\\Desktop\\Integration-Removals\\Server-1\\binary_path.exe"):
                print("Compilation Successful")
                with open("C:\\Users\\Win10\\Desktop\\Integration-Removals\\Server-1\\binary_path.exe", 'rb') as file:
                    output = file.read()
                break

        # Copy the building blocks to the folder for the next iteration of the GAN
        for i in range(10):
            ip = os.path.join(BB_path,f"BuildingBlock-{i+1}/{variables[i]}.c")
            op = os.path.join(BB_Initial_folder,f"{i+1}.c")
            shutil.copy2(ip, op)
        
        # Sending the binary to the client
        try:
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(output)

        except FileNotFoundError:
            self.send_error(404, 'File Not Found')

if __name__ == "__main__":
    port = 8002
    handler = MyHandler
    # Create an instance of the TCPServer
    httpd = TCPServer(("0.0.0.0", port), handler)
    print(f"Serving on port {port}")
    # Starting the server
    httpd.serve_forever()
    