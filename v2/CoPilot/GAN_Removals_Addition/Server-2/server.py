from http.server import BaseHTTPRequestHandler, HTTPServer
import os
import subprocess
import cgi
import shutil
from datetime import datetime

# Define the paths
json_path = r'C:\Users\Win10\Desktop\Integration-Removals\Server-2\Others\File.json'
processing_file_path = r'C:\Users\Win10\Desktop\Integration-Removals\Server-2\Code\Code_Generation.py'
zip_file_path = r"C:\Users\Win10\Desktop\Integration-Removals\Server-2\Results\Code.zip"
res_folder = r"C:\Users\Win10\Desktop\Integration-Removals\Server-2\Results\EXtra"
log_file_path = r"C:\Users\Win10\Desktop\Integration-Removals\Server-2\Results\Current\log.txt"
current_path = r"C:\Users\Win10\Desktop\Integration-Removals\Server-2\Results\Current"

# Function to empty a folder
def empty_folder(folder_path):
    for item in os.listdir(folder_path):
        item_path = os.path.join(folder_path, item)
        if os.path.isfile(item_path):
            os.remove(item_path)
        elif os.path.isdir(item_path):
            empty_folder(item_path)
            os.rmdir(item_path)

# Custom handler class
class MyHandler(BaseHTTPRequestHandler):
    def do_POST(self):
        form = cgi.FieldStorage(
            fp=self.rfile,
            headers=self.headers,
            environ={'REQUEST_METHOD': 'POST'}
        )
        if not os.path.exists(res_folder):
            os.makedirs(res_folder)
        if not os.path.exists(os.path.dirname(log_file_path)):
            os.makedirs(os.path.dirname(log_file_path))

        
        with open(log_file_path, 'w') as f:
            f.write(f"")
        with open(log_file_path, 'a') as f:
            f.write(f"Request received at {datetime.now()}\n")
        # Check if 'file' field exists in the form
        if 'file' in form:
            with open(log_file_path, 'a') as f:
                f.write("JSON file found\n")
            file_item = form['file']
            with open(json_path, 'wb') as f:
                f.write(file_item.file.read())
            try:   
                with open(log_file_path, 'a') as f:
                    f.write("Running the processing script...\n")
                # Running the processing script
                subprocess.run(['python', processing_file_path])
            except Exception as e:
                print("Error running the processing script...")
            # Send the zip file as response
            if os.path.exists(zip_file_path):
                print("Zip file found")
                print("Sending zip file...")
                with open(zip_file_path, 'rb') as f:
                    zip_content = f.read()
                self.send_response(200)
                self.send_header('Content-type', 'application/zip')
                self.end_headers()
                self.wfile.write(zip_content)
                now = datetime.now()
                file_path = os.path.join(res_folder, now.strftime("%Y-%m-%d_%H-%M-%S"))
                os.makedirs(file_path, exist_ok=True)
                shutil.move(zip_file_path, file_path)
                empty_folder(current_path)
            else:
                print("Zip file not found")
                self.send_response(404)
                self.end_headers()
                self.wfile.write(b'Zip file not found')
                self.send_response(200)
                self.send_header('Content-type', 'text/plain')
                self.end_headers()
                self.wfile.write(b'File received successfully')
                empty_folder(current_path)
        else:
            self.send_response(400)
            self.end_headers()
            self.wfile.write(b'No file provided in the request')

def run(server_class=HTTPServer, handler_class=MyHandler, port=8003):
    server_address = ('', port)
    # Creating an instance of the server
    httpd = server_class(server_address, handler_class)
    print(f'Starting server on port {port}...')
    # Starting the server
    httpd.serve_forever()

if __name__ == "__main__":
    run()

