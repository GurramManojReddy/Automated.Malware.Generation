from http.server import SimpleHTTPRequestHandler
from socketserver import TCPServer
import subprocess
from datetime import datetime
import zipfile
import os

current_datetime = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')

def zip_folder_with_timestamp(input_folder_path):
    # Check if the input folder exists
    if not os.path.exists(input_folder_path):
        raise FileNotFoundError(f"The folder '{input_folder_path}' does not exist.")
    # Create the output zip file path
    parent_directory = os.path.dirname(input_folder_path)
    current_datetime = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
    output_zip_filename = f"{current_datetime}_output.zip"
    # Create the 'Results' folder if it does not exist
    if not os.path.exists(f"{parent_directory}/Results"):
        os.makedirs(f"{parent_directory}/Results")
    output_zip_path = os.path.join(f"{parent_directory}/Results", output_zip_filename)
    # Creating the zip file
    with zipfile.ZipFile(output_zip_path, 'w') as zip_file:
        for root, dirs, files in os.walk(input_folder_path):
            for file in files:
                file_path = os.path.join(root, file)
                zip_file.write(file_path, os.path.relpath(file_path, input_folder_path))

            for dir in dirs:
                dir_path = os.path.join(root, dir)
                zip_file.write(dir_path, os.path.relpath(dir_path, input_folder_path))
    # Checking if the zip file was created successfully
    if os.path.exists(output_zip_path):
        return output_zip_path
    else:
        raise RuntimeError(f"Failed to create the zip file at '{output_zip_path}'.")



class MyHandler(SimpleHTTPRequestHandler):
    def do_GET(self):
        # Creating the root folder to store the generated building blocks and binaries along with metadata
        if not os.path.exists(root_folder):
            os.makedirs(root_folder)
        # Extract the input variation from the URL
        input_var = self.path.lstrip('/')
        # Generating the building blocks
        script_path = 'C:/Users/Win10/Desktop/Project/Server/code_generation.py'  # Replace with the actual path to your Python script
        subprocess.run(['python', script_path, input_var])
        # Compiling the building blocks
        script_path = 'C:/Users/Win10/Desktop/Project/Server/code_compiling.py'
        subprocess.run(['python',script_path])  # Replace with the actual path to your Python script
        root_folder = 'C:/Users/Win10/Desktop/Project/Generated Building Blocks'  # Replace with the actual path to your root folder
        
        # Zipping the generated building blocks and binaries
        zip_file_path = zip_folder_with_timestamp(root_folder)
        print(f"Zip file saved at: {zip_file_path}")

        if os.path.exists(zip_file_path):
            # Sending the zip file back to the client
            with open(zip_file_path, 'rb') as zip_file:
                zip_data = zip_file.read()
            # Sending the response
            self.send_response(200)
            self.send_header('Content-type', 'application/zip')
            self.send_header('Content-Disposition', f'attachment; filename={current_datetime}_output.zip')
            self.end_headers()
            self.wfile.write(zip_data)
        else:
            self.send_response(404)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b'File not found')

if __name__ == "__main__":
    # Specify the port number
    port = 8001
    handler = MyHandler
    # Starting the server
    httpd = TCPServer(("0.0.0.0", port), handler)
    print(f"Serving on port {port}")
    httpd.serve_forever()
