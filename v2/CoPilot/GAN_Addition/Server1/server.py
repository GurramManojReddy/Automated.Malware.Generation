from http.server import SimpleHTTPRequestHandler
from socketserver import TCPServer
import subprocess
import os

currrent_binary_index = "C:/Users/Win10/Desktop/Integration/Extra/current_binary.txt"
count_path = r"C:\Users\Win10\Desktop\Integration\Extra\count.txt" # This file will be used to store the count of the number of files generated in the server-2

class MyHandler(SimpleHTTPRequestHandler):
    def do_GET(self):
        if not os.path.exists(os.path.dirname(count_path)):
            os.makedirs(os.path.dirname(count_path))
        with open(count_path, 'w') as file:
            file.write("0")
        # Reading the current binary index from the file
        with open(currrent_binary_index, 'r') as file:
            index = file.read()
        new_idx = int(index)

        file_path = f'C:/Users/Win10/Desktop/Combinations/combination-{new_idx}.exe'
        if os.path.exists(file_path):
            os.remove(file_path)

        while True:
            new_idx = int(new_idx) + 1
            file_path = f"C:/Users/Win10/Desktop/Combinations/combination-{new_idx}.c"
            if not os.path.exists(file_path):
                continue
            try:
                # Compiling the file
                subprocess.run(['gcc', file_path, '-o', f'C:/Users/Win10/Desktop/Combinations/combination-{new_idx}.exe'], stderr=subprocess.DEVNULL)
            except Exception as e:
                print(f"Error compiling file: {str(e)}")
            if os.path.exists(f'C:/Users/Win10/Desktop/Combinations/combination-{new_idx}.exe'):
                break
        # Writing the new index to the file
        with open(currrent_binary_index, 'w') as file:
            file.write(str(new_idx))
        with open(f'C:/Users/Win10/Desktop/Combinations/combination-{new_idx}.exe', 'rb') as file:
            content = file.read()
        
        try:
            print(f"Sending combination-{new_idx}.exe")
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(content)

        except FileNotFoundError:
            print(f"File not found: combination-{new_idx}.exe")
            self.send_error(404, 'File Not Found')

if __name__ == "__main__":
    port = 8002
    handler = MyHandler
    # Starting the server
    httpd = TCPServer(("0.0.0.0", port), handler)
    print(f"Serving on port {port}")
    httpd.serve_forever()
    