import os
import lief
import pickle
# import argparse
# import numpy as np
# import pandas as pd
# import tensorflow as tf
# from keras.models import Model, load_model

import time
import sys
import requests
import re
import zipfile
from datetime import datetime
from io import BytesIO

detected_malware = 0
detected_goodware = 0

# def extract_filename(response):
#     content_disposition = response.headers.get('Content-Disposition')
#     if content_disposition:
#         match = re.search(r'filename="(.+)"', content_disposition)
#         if match:
#             return match.group(1)
#     return None

def is_dll(binary):
    return bool(binary.header.characteristics & lief.PE.HEADER_CHARACTERISTICS.DLL)

def send_file_to_server(file_path, server_url, zip_folder):
    try:
        files = {'file': open(file_path, 'rb')}
        response = requests.post(server_url, files=files)
        
        if response.status_code == 200:
            print("File sent successfully to the server.")
            if response.headers['Content-Type'] == 'application/zip':
                os.makedirs(zip_folder, exist_ok=True)
                with open(zip_folder + 'received_file.zip', 'wb') as f:
                    print(zip_folder + 'received_file.zip')
                    f.write(response.content)
                print("Zip file received successfully.")
            else:
                print("Response received:", response.text)
        else:
            print(f"Failed to send file to the server. Server returned status code: {response.status_code}")
    except Exception as e:
        print(f"Error sending file to server: {e}")

# Get the input variation from the command line arguments
if len(sys.argv) == 5:
    model = sys.argv[1]
    label = sys.argv[2]
    iterations = int(sys.argv[3])
    ip_address = sys.argv[4]
    # num_binaries_to_request = sys.argv[6]
    # print(f"Received input variation: {fp}")
else:
    print("INVALID ARGUMENTS")
    exit(1)

# if label == "EXE":
#     train_size = 19307
# elif label == "DLL":
#     train_size = 3561

# num_binaries_to_request = 950
# iterations = 1

logs_path = "/home/bhavan/ModifiedMalGAN/logs_integration_" + model + "_" + label + "_" + str(iterations) + "iterations/"
fp = logs_path + "binaries/"
server_logs_path = logs_path + "server_logs/"
os.makedirs(logs_path, exist_ok = True)
os.makedirs(fp, exist_ok = True)
os.makedirs(server_logs_path, exist_ok = True)

pred_path = "/home/bhavan/ModifiedMalGAN/save_path_" + model + "_" + label + "_" + str(iterations) + "iterations/"

# for i in range(num_binaries_to_request):
if not os.path.exists(logs_path + 'i.pkl'):
    t = 0
    with open(logs_path + 'i.pkl', 'wb') as file:
        pickle.dump(t, file)
with open(logs_path + 'i.pkl', 'rb') as file:
    i = pickle.load(file)
while True:
    i += 1
    with open(logs_path + 'i.pkl', 'wb') as file:
        pickle.dump(i, file)
    i -= 1
    # time.sleep(10)
    # print("Hello, World!")
    # Specify the URL of the server with the input argument
    version = 0
    print(f"Request Started binary-{i} version-{version}")
    url = 'http://' + ip_address + ':8002/'  # Modify the URL with the input argument

    # Send a GET request to the server
    response = requests.get(f'{url}')
    # file_name = extract_filename(response)

    print(response)

    # current_datetime = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')

    # Check if the download request was successful (status code 200)
    if response.status_code == 200:
        # filename = f'{current_datetime}.zip'
        # filepath = fp + '/' + extract_filename(response)
        filepath = fp + '/' + str(i+1) + '_v' + str(version) + '.' + label.lower()

        # Save the downloaded zip file in the current working directory
        print(filepath)
        with open(filepath, 'wb') as downloaded_file:
            downloaded_file.write(response.content)

        print(f"Downloaded binary file successfully. Saved as: {filepath}")
    else:
        print(f"Failed to download binary file. Server returned status code: {response.status_code}")

    # filename = "/home/bhavan/ModifiedMalGAN/datasets/malware/EXE/Windows/BB/Files/2012-01-26/calc.exe"

    model_py_path = "/home/bhavan/ModifiedMalGAN/" + model + "_" + label + ".py"

    os.system("python3 " + model_py_path + " --test " + filepath + " 150 19307 1 " + pred_path)

    with open(pred_path+'y_pred.obj', 'rb') as pred_file:
        y_pred = pickle.load(pred_file)

    print(y_pred)

    if y_pred == 1:
        detected_malware += 1
    else:
        detected_goodware += 1

    with open(logs_path + 'logs.txt', 'a+') as file:
        print(f"binary {i+1} | version {version} | result {y_pred} | detected_malware = {detected_malware} | detected_goodware = {detected_goodware}\n", file=file)

    version += 1

    while y_pred == 1 and version <= iterations:
        os.system("python3 " + model_py_path + " --attack " + filepath + " 150 19307 1 " + pred_path)
        json_file_path = pred_path + 'json_feat_space.json'
        # with open(json_file_path+'json_feat_space.obj', 'wb') as j_file:
        #     json_file = pickle.load(j_file)
        url = f'http://' + ip_address + ':8003/'
        # # ADD CODE TO SEND JSON FILE TO THE SERVER
        # files = {'file': (json_file_path, open(json_file_path, 'rb'))}

        # file_sending_response = requests.post(url, files=files)

        # print(file_sending_response.text)

        # print(f"Request Started binary-{i} version-{version}")

        # # Send a GET request to the server
        # response = requests.get(f'{url}')
        # # file_name = extract_filename(response)

        # print(response)

        # # current_datetime = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')

        # # Check if the download request was successful (status code 200)
        # if response.status_code == 200:
        #     # filename = f'{current_datetime}.zip'
        #     # filepath = fp + '/' + extract_filename(response)
        #     filepath = fp + '/' + str(i+1)  + '_v' + str(version) +  '.zip'

        #     # Save the downloaded zip file in the current working directory
        #     print(filepath)
        #     # with open(filepath, 'wb') as downloaded_file:
        #     #     downloaded_file.write(response.content)
        #     zip_content = BytesIO(response.content)
            
        #     extracted_dir = server_logs_path + str(i+1)  + '_v' + str(version) + '/'
        #     os.makedirs(extracted_dir, exist_ok = True)

        #     with zipfile.ZipFile(zip_content, 'r') as zip_ref:
        #         # Extract all the contents into the specified directory
        #         zip_ref.extractall(extracted_dir)
        #     filepath = extracted_dir + 'Binary_V1.' + label.lower()

        #     print(f"Downloaded and extracted zip file successfully")
        # else:
        #     print(f"Failed to download zip file. Server returned status code: {response.status_code}")
        zip_dir = server_logs_path + str(i+1)  + '_v' + str(version) + '/'
        send_file_to_server(json_file_path, url, zip_dir)

        with zipfile.ZipFile(zip_dir + 'received_file.zip', 'r') as zip_ref:
            zip_ref.extractall(zip_dir)

        model_py_path = "/home/bhavan/ModifiedMalGAN/" + model + "_" + label + ".py"
        filepath = zip_dir + 'Binary_V1.' + label.lower()
        if not os.path.exists(filepath):
            with open(logs_path + 'logs.txt', 'a+') as file:
                print(f"binary {i+1} | version {version} | Binary not received in the Zip file\n", file=file)
            version += 1
            continue
        os.system("python3 " + model_py_path + " --test " + filepath + " 150 19307 1 " + pred_path)

        with open(pred_path+'y_pred.obj', 'rb') as pred_file:
            y_pred = pickle.load(pred_file)

        print(y_pred)

        if y_pred == 1:
            detected_malware += 1
        else:
            detected_goodware += 1
        
        with open(logs_path + 'logs.txt', 'a+') as file:
            print(f"binary {i+1} | version {version} | result {y_pred} | detected_malware = {detected_malware} | detected_goodware = {detected_goodware}\n", file=file)

        version += 1
    i += 1